hookpunch.history = (function () { hookpunch.history = {}; hookpunch.history.init = function () { if (!hookpunch.initialised) { if (hookpunch.options.history) { hookpunch.history = { undoFlag: false, busyRevertingValue: false} } } }; ko.extenders.trackHistory = function (b, a) { b.propertyName = a.propertyName; b.revertValue = b.originalState[b.propertyName]; b.version = 0; b.subscribe(function (c) { if (!hookpunch.history.busyRevertingValue) { var d = b.parent._hookpunch.id; if (!hookpunch.history[d].changes) { hookpunch.history[d].changes = [] } if (hookpunch.history.undoFlag) { hookpunch.history[d].changes = []; b.version = 0; hookpunch.history.undoFlag = false } b.version = ++b.version; hookpunch.history[d].changes.splice(0, 0, { propertyName: a.propertyName, value: b(), version: b.version }) } }) }; return hookpunch.history })(); hookpunch = (function () { var a = {}; a.states = { NEW: 1, CHANGED: 2, UNCHANGED: 3 }; a.options = null; a.initialised = false; a.init = function (b) { if (!a.initialised) { a.options = $.extend({ parentLink: true, trackState: true, history: false }, a.options, b); if (a.parentLink) { a.parentLink.init() } if (a.trackState) { a.trackState.init() } if (a.history) { a.history.init() } a.initialised = true } }; a.observable = function (c) { var b = this; b.getUniqueId = function () { if (!a.lastId) { a.lastId = 0 } return ++a.lastId }; b.init = function (d) { ko.mapping.fromJS(d, {}, b); b._hookpunch = {}; b._hookpunch.id = b.getUniqueId(); b._hookpunch.undoCalled = false; a.history[b._hookpunch.id] = { originalObject: d, changes: new Array() }; for (prop in b) { if (b[prop] != null && b[prop].extend != undefined && prop != a.options.stateField) { if (a.options.parentLink) { b[prop].extend({ parentLink: { parent: b} }) } if (a.options.trackState) { b[prop].extend({ trackState: { originalValue: b[prop]()} }) } if (a.options.history) { b[prop].extend({ trackHistory: { propertyName: prop, hookpunchId: b._hookpunch.id} }) } } } }; b.undo = function () { var d = a.history[b._hookpunch.id].changes; var f = d.splice(0, 1)[0]; if (f) { a.history.undoFlag = true; a.history.busyRevertingValue = true; var e = false; for (index in d) { var g = d[index]; if (g.propertyName === f.propertyName && g.version !== f.version) { e = true; b[f.propertyName].version = g.version; b[f.propertyName](g.value); break } } if (!e) { b[f.propertyName].version = 0; b[f.propertyName](b[f.propertyName].originalValue) } a.history.busyRevertingValue = false } }; b.stateName = function () { for (state in a.states) { var d = this[a.options.stateField]; if (a.states[state] === d) { return state } } }; b.init(c, true); return b }; return a })(); hookpunch.parentLink = (function () { hookpunch.parentLink = {}; hookpunch.parentLink.init = function () { if (!hookpunch.initialised) { ko.extenders.parentLink = function (b, a) { b.parent = a.parent } } }; return hookpunch.parentLink })(); hookpunch.trackState = (function () { hookpunch.trackState = {}; hookpunch.trackState.init = function () { ko.extenders.trackState = function (b, a) { b.originalValue = a.originalValue; b.originalState = b.parent[hookpunch.options.stateField](); if (b.parent[hookpunch.options.stateField] === undefined) { throw "Make sure you've initialised the correct stateField in hookpunch.init({ stateField: '[Your field name here]'});" } b.subscribe(function (c) { var d = b.originalValue !== c; if (d) { if (b.originalState == hookpunch.states.NEW) { b.parent[hookpunch.options.stateField] = hookpunch.states.NEW } else { if (b.originalState == hookpunch.states.UNCHANGED) { b.parent[hookpunch.options.stateField] = hookpunch.states.CHANGED } } if (b.parent.change) { b.parent.change(b.parent) } if (hookpunch.options.globalChange) { hookpunch.options.globalChange(b.parent) } } else { if (b.originalState == hookpunch.states.NEW) { b.parent[hookpunch.options.stateField] = hookpunch.states.NEW } else { if (b.originalState == hookpunch.states.UNCHANGED) { b.parent[hookpunch.options.stateField] = hookpunch.states.UNCHANGED } } if (b.parent.revert) { b.parent.revert(b.parent) } if (hookpunch.options.globalRevert) { hookpunch.options.globalRevert(b.parent) } } }); return b } }; return hookpunch.trackState })();